openapi: 3.0.0
info:
    title: Data Plane
    version: '2.0'
    description: 'https://github.com/kubeflow/kfserving/blob/master/docs/predict-api/v2/required_api.md'
    license:
        name: Apache 2.0
paths:
    /v2/health/live:
        get:
            responses:
                '200':
                    description: OK
            operationId: get-v2-health-live
            summary: Server Live
            description: >-
                The “server live” API indicates if the inference server is able to receive and respond to
                metadata and inference requests. The “server live” API can be used directly to implement the
                Kubernetes livenessProbe.
    /v2/health/ready:
        get:
            tags: []
            responses:
                '200':
                    description: OK
            operationId: get-v2-health-ready
            summary: Server Ready
            description: >-
                The “server ready” health API indicates if all the models are ready for inferencing. The
                “server ready” health API can be used directly to implement the Kubernetes readinessProbe.
    '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}/ready':
        get:
            tags: []
            responses:
                '200':
                    description: OK
            operationId: get-v2-models-$-modelName-versions-$-modelVersion-ready
            summary: Model Ready
            description: >-
                The “model ready” health API indicates if a specific model is ready for inferencing. The model
                name and (optionally) version must be available in the URL. If a version is not provided the
                server may choose a version based on its own policies.
        parameters:
            -
                name: MODEL_NAME
                schema:
                    type: string
                in: path
                required: true
            -
                name: MODEL_VERSION
                schema:
                    type: string
                in: path
                required: true
    /v2/:
        get:
            tags: []
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/metadata_server_response'
                    description: OK
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/metadata_server_error_response'
                    description: Bad Request
            operationId: get-v2
            summary: Server Metadata
            description: >-
                The server metadata endpoint provides information about the server. A server metadata request
                is made with an HTTP GET to a server metadata endpoint. In the corresponding response the HTTP
                body contains the [Server Metadata Response JSON
                Object](#server-metadata-response-json-object) or the [Server Metadata Response JSON Error
                Object](#server-metadata-response-json-error-object).
    '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}':
        get:
            tags: []
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/metadata_model_response'
                    description: OK
            operationId: get-v2-models-$-modelName
            summary: Model Metadata
            description: >-
                The per-model metadata endpoint provides information about a model. A model metadata request
                is made with an HTTP GET to a model metadata endpoint. In the corresponding response the HTTP
                body contains the [Model Metadata Response JSON Object](#model-metadata-response-json-object)
                or the [Model Metadata Response JSON Error
                Object](#model-metadata-response-json-error-object). The model name and (optionally) version
                must be available in the URL. If a version is not provided the server may choose a version
                based on its own policies or return an error.
        parameters:
            -
                name: MODEL_NAME
                schema:
                    type: string
                in: path
                required: true
            -
                name: MODEL_VERSION
                schema:
                    type: string
                in: path
                required: true
    '/v2/models/{MODEL_NAME}/infer':
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/inference_request'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/inference_response'
                    description: OK
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/inference_error_response'
                    description: Bad Request
            operationId: post-v2-models-$-MODEL_NAME-infer
            summary: Inference
            description: >-
                An inference request is made with an HTTP POST to an inference endpoint. In the request the
                HTTP body contains the [Inference Request JSON Object](#inference-request-json-object). In the
                corresponding response the HTTP body contains the [Inference Response JSON
                Object](#inference-response-json-object) or [Inference Response JSON Error
                Object](#inference-response-json-error-object). See [Inference Request
                Examples](#inference-request-examples) for some example HTTP/REST requests and responses.
        parameters:
            -
                name: MODEL_NAME
                schema:
                    type: string
                in: path
                required: true
components:
    schemas:
        metadata_server_response:
            title: metadata_server_response
            description: ''
            required:
                - name
                - version
                - extensions
            type: object
            properties:
                name:
                    type: string
                version:
                    type: string
                extensions:
                    type: array
                    items:
                        type: string
            x-examples: {}
        metadata_server_error_response:
            title: metadata_server_error_response
            required:
                - error
            type: object
            properties:
                error:
                    type: string
        metadata_model_response:
            title: metadata_model_response
            required:
                - name
                - platform
            type: object
            properties:
                name:
                    type: string
                versions:
                    type: array
                    items:
                        type: string
                platform:
                    type: string
                inputs:
                    type: array
                    items:
                        $ref: '#/components/schemas/metadata_tensor'
                outputs:
                    type: array
                    items:
                        $ref: '#/components/schemas/metadata_tensor'
        metadata_tensor:
            title: metadata_tensor
            required:
                - name
                - datatype
                - shape
            type: object
            properties:
                name:
                    type: string
                datatype:
                    type: string
                shape:
                    type: array
                    items:
                        type: integer
        metadata_model_error_response:
            title: metadata_model_error_response
            required:
                - error
            type: object
            properties:
                error:
                    type: string
        inference_request:
            title: inference_request
            required:
                - inputs
            type: object
            properties:
                id:
                    type: string
                parameters:
                    $ref: '#/components/schemas/parameters'
                inputs:
                    type: array
                    items:
                        $ref: '#/components/schemas/request_input'
                outputs:
                    type: array
                    items:
                        $ref: '#/components/schemas/request_output'
            x-examples:
                Example 1:
                    id: '42'
                    inputs:
                        -
                            name: input0
                            shape:
                                - 2
                                - 2
                            datatype: UINT32
                            data:
                                - 1
                                - 2
                                - 3
                                - 4
                        -
                            name: input1
                            shape:
                                - 3
                            datatype: BOOL
                            data:
                                - true
                    outputs:
                        -
                            name: output0
                Example 2:
                    id: '42'
                    outputs:
                        -
                            name: output0
                            shape:
                                - 3
                                - 2
                            datatype: FP32
                            data:
                                - 1
                                - 1.1
                                - 2
                                - 2.1
                                - 3
                                - 3.1
        parameters:
            title: parameters
            type: object
            x-examples: {}
        request_input:
            title: request_input
            required:
                - name
                - shape
                - datatype
                - data
            type: object
            properties:
                name:
                    type: string
                shape:
                    type: array
                    items:
                        type: integer
                datatype:
                    type: string
                parameters:
                    $ref: '#/components/schemas/parameters'
                data:
                    $ref: '#/components/schemas/tensor_data'
        tensor_data:
            title: tensor_data
            type: array
            items:
                format: double
                type: number
        request_output:
            title: request_output
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                parameters:
                    $ref: '#/components/schemas/parameters'
        response_output:
            title: response_output
            required:
                - name
                - shape
                - datatype
                - data
            type: object
            properties:
                name:
                    type: string
                shape:
                    type: array
                    items:
                        type: integer
                datatype:
                    type: string
                parameters:
                    $ref: '#/components/schemas/parameters'
                data:
                    $ref: '#/components/schemas/tensor_data'
        inference_response:
            title: inference_response
            required:
                - model_name
                - outputs
            type: object
            properties:
                model_name:
                    type: string
                model_version:
                    type: string
                id:
                    type: string
                parameters:
                    $ref: '#/components/schemas/parameters'
                outputs:
                    type: array
                    items:
                        $ref: '#/components/schemas/response_output'
        inference_error_response:
            title: inference_error_response
            type: object
            properties:
                error:
                    type: string
